import json
import asyncio
from twitchio.ext import commands
from database import Database

class TwitchBot(commands.Bot):
    def __init__(self):
        with open('config.json', 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        
        super().__init__(
            token=self.config['twitch']['oauth_token'],
            client_id=self.config['twitch']['client_id'],
            nick='bot',
            prefix='!',
            initial_channels=[self.config['twitch']['channel']]
        )
        
        self.db = Database()
        self.current_giveaway = None
        self.user_tracking_task = None
    
    async def event_ready(self):
        await self.db.init_db()
        print(f'Bot –≥–æ—Ç–æ–≤ | {self.nick}')
        self.user_tracking_task = asyncio.create_task(self.track_users())
    
    async def track_users(self):
        while True:
            try:
                channel = self.get_channel(self.config['twitch']['channel'])
                if channel:
                    chatters = await channel.chatters()
                    for chatter in chatters.all:
                        await self.db.update_user_time(str(chatter.id), chatter.name)
                await asyncio.sleep(60)
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}')
                await asyncio.sleep(60)

    @commands.command(name='newstream')
    async def new_stream(self, ctx):
        if not ctx.author.is_mod and not ctx.author.is_broadcaster:
            return

        await self.db.start_new_stream()
        await ctx.send("üî¥ –ù–æ–≤—ã–π —Å—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è! –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

    @commands.command(name='giveaway')
    async def start_giveaway(self, ctx, key_name: str = None):
        if not ctx.author.is_mod and not ctx.author.is_broadcaster:
            return
        
        if not key_name:
            await ctx.send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !giveaway <–∫–ª—é—á>")
            return
        
        if self.current_giveaway:
            await ctx.send(f"–£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à '{self.current_giveaway}'. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π !endgiveaway")
            return
        
        self.current_giveaway = key_name
        await self.db.clear_giveaway(key_name)
        await ctx.send(f"üéâ –†–æ–∑—ã–≥—Ä—ã—à '{key_name}' –Ω–∞—á–∞–ª—Å—è! –£—á–∞—Å—Ç–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π {self.config['commands']['giveaway_join']}")
    
    @commands.command(name='endgiveaway')
    async def end_giveaway(self, ctx):
        if not ctx.author.is_mod and not ctx.author.is_broadcaster:
            return
        
        if not self.current_giveaway:
            await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            return
        
        count = await self.db.get_participants_count(self.current_giveaway)
        ended_giveaway = self.current_giveaway
        self.current_giveaway = None
        await ctx.send(f"üìù –ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –≤ '{ended_giveaway}' –∑–∞–≤–µ—Ä—à–µ–Ω! –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}")
    
    @commands.command(name='join')
    async def join_giveaway(self, ctx):
        if not self.current_giveaway:
            await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
            return
        
        user_time = await self.db.get_user_watch_time(str(ctx.author.id))
        min_time = self.config['giveaway']['min_watch_time_minutes']
        
        if user_time < min_time:
            await ctx.send(f"@{ctx.author.name}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ù—É–∂–Ω–æ: {min_time} –º–∏–Ω, —É –≤–∞—Å: {user_time} –º–∏–Ω")
            return
        
        if await self.db.add_to_giveaway(self.current_giveaway, str(ctx.author.id), ctx.author.name):
            await ctx.send(f"@{ctx.author.name}, –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '{self.current_giveaway}'!")
        else:
            await ctx.send(f"@{ctx.author.name}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '{self.current_giveaway}'")
    
    @commands.command(name='pick')
    async def pick_winner(self, ctx, key_name: str = None):
        if not ctx.author.is_mod and not ctx.author.is_broadcaster:
            return
        
        if not key_name:
            await ctx.send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !pick <–∫–ª—é—á>")
            return
        
        winner = await self.db.pick_random_winner(key_name)
        if winner:
            user_id, username = winner
            await ctx.send(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ '{key_name}': @{username}!")
        else:
            await ctx.send(f"–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '{key_name}'")
    
    @commands.command(name='time')
    async def check_time(self, ctx):
        user_time = await self.db.get_user_watch_time(str(ctx.author.id))
        await ctx.send(f"@{ctx.author.name}, –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Å—Ç—Ä–∏–º–∞: {user_time} –º–∏–Ω—É—Ç")
    
    @commands.command(name='participants')
    async def show_participants(self, ctx, key_name: str = None):
        if not ctx.author.is_mod and not ctx.author.is_broadcaster:
            return
        
        if not key_name:
            if not self.current_giveaway:
                await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !participants <–∫–ª—é—á>")
                return
            key_name = self.current_giveaway
        
        count = await self.db.get_participants_count(key_name)
        await ctx.send(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ '{key_name}': {count}")
    
    @commands.command(name='current')
    async def current_giveaway(self, ctx):
        if self.current_giveaway:
            count = await self.db.get_participants_count(self.current_giveaway)
            await ctx.send(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: '{self.current_giveaway}' (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count})")
        else:
            await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")

if __name__ == '__main__':
    bot = TwitchBot()
    bot.run()